

import cv2
import os
import pyttsx3
engine = pyttsx3.init()
engine.setProperty('rate', 150)
dispW=1280
dispH=960
flip=2
thres = 0.6
cam=cv2.VideoCapture(0)
cam.set(3,1280)
cam.set(4,720)
cam.set(10,70)
classNames= ['person', 'bicycle', 'car', 'motorcycle', 'airplane', 'bus', 'train', 'truck', 'boat', 'traffic light', 'fire hydrant', 'street sign', 'stop sign', 'parking meter', 'bench', 'bird', 'cat', 'dog', 'horse', 'sheep', 'cow', 'elephant', 'bear', 'zebra', 'giraffe', 'hat', 'backpack', 'umbrella', 'shoe', 'eye glasses', 'handbag', 'tie', 'suitcase', 'frisbee', 'skis', 'snowboard', 'sports ball', 'kite', 'baseball bat', 'baseball glove', 'skateboard', 'surfboard', 'tennis racket', 'bottle', 'plate', 'wine glass', 'cup', 'fork', 'knife', 'spoon', 'bowl', 'banana', 'apple', 'sandwhich', 'orange', 'broccoli', 'carrot', 'hot dog', 'pizza', 'donut', 'cake', 'chair', 'couch', 'potted plant', 'bed', 'mirror', 'dining table', 'window', 'desk', 'toilet', 'door', 'tv', 'laptop', 'mouse', 'remote', 'keyboard', 'cell phone', 'microwave', 'oven', 'toaster', 'sink', 'refrigerator', 'blender', 'book', 'clock', 'vase', 'scissors', 'teddy bear', 'hair dryer', 'toothbrush', 'hair brush']
classFile = 'Object_Detection_Files/coco.names'


configPath = 'Object_Detection_Files/ssd_mobilenet_v3_large_coco_2020_01_14.pbtxt'
weightsPath = 'Object_Detection_Files/frozen_inference_graph.pb'

net = cv2.dnn_DetectionModel(weightsPath,configPath)
net.setInputSize(320,320)
net.setInputScale(1.0/ 127.5)
net.setInputMean((127.5, 127.5, 127.5))
net.setInputSwapRB(True)

while True:
	ret, frame=cam.read()
	classIds, confs, bbox = net.detect(frame,confThreshold=thres)
	if len(classIds) != 0:
		for classId, confidence,box in zip(classIds.flatten(), confs.flatten(), bbox):
			text = 'Detected', classNames[classId-1]
			print(text)
			engine.say(text)
			engine.runAndWait()
			cv2.rectangle(frame,box,color=(0,255,0),thickness=2)
			cv2.putText(frame,classNames[classId-1].upper(),(box[0]+10,box[1]+30),
			cv2.FONT_HERSHEY_COMPLEX,1,(0,255,0),2)
	cv2.imshow('piCam', frame)
	if cv2.waitKey(1)==ord('q'):
		break
came.release()
cv2.destroyAllWindows()
